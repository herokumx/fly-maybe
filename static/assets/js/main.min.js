var sv, ScriptsVari = {
    settings: {
        $body: $("body"),
        $html: $("html")
    },
    init: function() {
        sv = this.settings, this.bindUIActions(), this.onLoadActions(), this.scrollActions(), 
        this.resizeActions();
    },
    onLoadActions: function() {
        $(window).load(function() {});
    },
    bindUIActions: function() {
        var i = $("#datetimepicker1").find("input").data("limit");
        $("#datetimepicker1").datetimepicker({
            format: "YYYY-MM-DD HH:mm:ss",
            stepping: 10,
            maxDate: i
        }), $("#map").length > 0 && (ScriptsVari.initMap(), ScriptsVari.initMap2());
    },
    scrollActions: function() {
        $(window).scroll(function() {});
    },
    resizeActions: function() {
        $(window).resize(function() {}).resize();
    },
    initMap: function() {
        $("#info");
        var i, e = $("#map"), n = function() {
            e.height(e.parent(".map-wrapper").outerHeight()), i && i.invalidateSize();
        };
        $(window).on("resize", function() {
            n();
        }), n(), i = L.map("map").setView([ 44.715514, -112.148438 ], 4);
        new L.StamenTileLayer("toner", {
            detectRetina: !0
        }).addTo(i);
        var t = L.control.layers().addTo(i), o = L.control.legend({
            autoAdd: !1
        }).addTo(i), a = L.GeometryUtils.arrayToMap(airports, "code");
        console.log(a), flights = _.sortBy(flights, function(i) {
            return -1 * i.Counts;
        }), console.log(flights);
        var r = _.groupBy(flights, function(i) {
            return i.UniqueCarrier;
        });
        console.log(r);
        var l = Number(flights[0].Counts);
        console.log("max count all:" + l), flights = _.filter(flights, function(i) {
            return "all" !== i.UniqueCarrier;
        }), console.log(flights);
        var c = Number(flights[0].Counts);
        console.log("max count:" + c);
        var s = 0, d = new L.LinearFunction([ 1, 16 ], [ 253, 48 ]), u = {
            recordsField: null,
            locationMode: L.LocationModes.CUSTOM,
            fromField: "Origin",
            toField: "Dest",
            codeField: null,
            getLocation: function(i, e, n, t) {
                var o, r = n[0], l = a[r];
                if (l) {
                    var c = new L.LatLng(Number(l.lat), Number(l.lon));
                    o = {
                        location: c,
                        text: r,
                        center: c
                    };
                }
                return o;
            },
            getEdge: L.Graph.EDGESTYLE.ARC,
            includeLayer: function(i) {
                return !1;
            },
            getIndexKey: function(i, e) {
                return e.Origin + "_" + e.Dest;
            },
            setHighlight: function(i) {
                return i.opacity = 1, i;
            },
            unsetHighlight: function(i) {
                return i.opacity = .5, i;
            },
            layerOptions: {
                fill: !1,
                opacity: .8,
                weight: .4,
                fillOpacity: 1,
                distanceToHeight: new L.LinearFunction([ 0, 20 ], [ 1e3, 300 ]),
                mode: "C",
                markers: {
                    end: !0
                }
            },
            legendOptions: {
                width: 200,
                numSegments: 5,
                className: "legend-line"
            },
            tooltipOptions: {
                iconSize: new L.Point(80, 64),
                iconAnchor: new L.Point(-5, 64),
                className: "leaflet-div-icon line-legend"
            },
            displayOptions: {
                Counts: {
                    weight: new L.LinearFunction([ 0, 1 ], [ c, 14 ]),
                    color: new L.HSLHueFunction([ 0, 100 ], [ c, 0 ], {
                        outputSaturation: "80%",
                        outputLuminosity: "50%"
                    }),
                    displayName: "Flights Out of Origin to Destination"
                }
            },
            onEachRecord: function(i, e, n) {
                i.bindPopup($(L.HTMLUtils.buildTable(e)).wrap("<div/>").parent().html()), n.location.animateLine({
                    duration: 5e3 * Math.random() + 500,
                    easing: L.AnimationUtils.easingFunctions.easeOut
                });
            }
        }, g = new L.Graph(flights, u);
        console.log(g), i.addLayer(g);
        var f = new L.MarkerDataLayer(a, {
            recordsField: null,
            locationMode: L.LocationModes.LATLNG,
            latitudeField: "lat",
            longitudeField: "lon",
            displayOptions: {
                direct_flights: {
                    color: new L.HSLHueFunction([ 0, 200 ], [ 253, 330 ], {
                        outputLuminosity: "60%"
                    })
                },
                code: {
                    title: function(i) {
                        return i;
                    }
                }
            },
            layerOptions: {
                fill: !1,
                stroke: !1,
                weight: 0,
                color: "#A0A0A0"
            },
            filter: function(i) {
                return Number(i.carriers) > 3;
            },
            setIcon: function(i, e) {
                var n = '<div><i class="fa fa-circle-thin"></i><span class="code">' + i.code + "</span></div>", t = $(n), o = t.find("i");
                L.StyleConverter.applySVGStyle(o.get(0), e);
                var a = L.Util.getFieldValue(i, "direct_flights"), r = d.evaluate(a);
                o.width(r), o.height(r), o.css("font-size", r + "px"), o.css("line-height", r + "px");
                var l = t.find(".code");
                return l.width(r), l.height(r), l.css("line-height", r + "px"), l.css("font-size", r / 3 + "px"), 
                l.css("margin-top", -r / 2 + "px"), new L.DivIcon({
                    iconSize: new L.Point(r, r),
                    iconAnchor: new L.Point(r / 2, r / 2),
                    className: "airport-icon",
                    html: t.wrap("<div/>").parent().html()
                });
            },
            onEachRecord: function(i, e) {
                i.on("mouseover", function() {
                    console.log(e), g.options.includeLayer = function(i) {
                        return i.Origin === e.code;
                    }, g.reloadData();
                });
            }
        });
        i.addLayer(f), t.addOverlay(f, "Airports");
        for (var p in r) if ("all" !== p) {
            var h = L.extend(u, {
                includeLayer: function(i) {
                    return i.UniqueCarrier === p;
                }
            }), y = new L.Graph(flights, h);
            t.addOverlay(y, p), 0 === s && o.addLayer(y), s++;
        }
    },
    initMap2: function() {
        $("#info-2");
        var i, e = $("#map-2"), n = function() {
            e.height($(window).height() - $("div.navbar").outerHeight()), i && i.invalidateSize();
        };
        $(window).on("resize", function() {
            n();
        }), n(), i = L.map("map-2").setView([ 44.715514, -112.148438 ], 4);
        new L.StamenTileLayer("toner", {
            detectRetina: !0
        }).addTo(i);
        var t = L.control.layers().addTo(i), o = L.control.legend({
            autoAdd: !1
        }).addTo(i), a = L.GeometryUtils.arrayToMap(airports, "code");
        console.log(a), flight_delays = _.sortBy(flight_delays, function(i) {
            return -1 * i.ratio;
        }), console.log(flight_delays);
        var r = _.groupBy(flight_delays, function(i) {
            return i.UniqueCarrier;
        });
        console.log(r);
        var l = Number(flight_delays[0].ratio);
        console.log("max count all:" + l), flight_delays = _.filter(flight_delays, function(i) {
            return "all" !== i.UniqueCarrier;
        }), console.log(flight_delays);
        var c = Number(flight_delays[0].ratio);
        console.log("max count:" + c);
        var s = 0, d = new L.LinearFunction([ 1, 16 ], [ 253, 48 ]), u = {
            recordsField: null,
            locationMode: L.LocationModes.CUSTOM,
            fromField: "Origin",
            toField: "Dest",
            codeField: null,
            getLocation: function(i, e, n, t) {
                var o, r = n[0], l = a[r];
                if (l) {
                    var c = new L.LatLng(Number(l.lat), Number(l.lon));
                    o = {
                        location: c,
                        text: r,
                        center: c
                    };
                }
                return o;
            },
            getEdge: L.Graph.EDGESTYLE.ARC,
            includeLayer: function(i) {
                return !1;
            },
            getIndexKey: function(i, e) {
                return e.Origin + "_" + e.Dest;
            },
            setHighlight: function(i) {
                return i.opacity = 1, i;
            },
            unsetHighlight: function(i) {
                return i.opacity = .5, i;
            },
            layerOptions: {
                fill: !1,
                opacity: .8,
                weight: .4,
                fillOpacity: 1,
                distanceToHeight: new L.LinearFunction([ 0, 20 ], [ 1e3, 300 ]),
                mode: "C",
                markers: {
                    end: !0
                }
            },
            legendOptions: {
                width: 200,
                numSegments: 5,
                className: "legend-line"
            },
            tooltipOptions: {
                iconSize: new L.Point(80, 64),
                iconAnchor: new L.Point(-5, 64),
                className: "leaflet-div-icon line-legend"
            },
            displayOptions: {
                ratio: {
                    weight: new L.LinearFunction([ 0, 1 ], [ 1, 14 ]),
                    color: new L.HSLHueFunction([ 0, 100 ], [ .5, 0 ], {
                        outputSaturation: "80%",
                        outputLuminosity: "50%"
                    }),
                    displayName: "Ratio of delayed flights over total"
                }
            },
            onEachRecord: function(i, e, n) {
                i.bindPopup($(L.HTMLUtils.buildTable(e)).wrap("<div/>").parent().html()), n.location.animateLine({
                    duration: 5e3 * Math.random() + 500,
                    easing: L.AnimationUtils.easingFunctions.easeOut
                });
            }
        }, g = new L.Graph(flight_delays, u);
        console.log(g), i.addLayer(g);
        var f = new L.MarkerDataLayer(a, {
            recordsField: null,
            locationMode: L.LocationModes.LATLNG,
            latitudeField: "lat",
            longitudeField: "lon",
            displayOptions: {
                direct_flights: {
                    color: new L.HSLHueFunction([ 0, 200 ], [ 253, 330 ], {
                        outputLuminosity: "60%"
                    })
                },
                code: {
                    title: function(i) {
                        return i;
                    }
                }
            },
            layerOptions: {
                fill: !1,
                stroke: !1,
                weight: 0,
                color: "#A0A0A0"
            },
            filter: function(i) {
                return Number(i.carriers) > 3;
            },
            setIcon: function(i, e) {
                var n = '<div><i class="fa fa-circle-thin"></i><span class="code">' + i.code + "</span></div>", t = $(n), o = t.find("i");
                L.StyleConverter.applySVGStyle(o.get(0), e);
                var a = L.Util.getFieldValue(i, "direct_flights"), r = d.evaluate(a);
                o.width(r), o.height(r), o.css("font-size", r + "px"), o.css("line-height", r + "px");
                var l = t.find(".code");
                return l.width(r), l.height(r), l.css("line-height", r + "px"), l.css("font-size", r / 3 + "px"), 
                l.css("margin-top", -r / 2 + "px"), new L.DivIcon({
                    iconSize: new L.Point(r, r),
                    iconAnchor: new L.Point(r / 2, r / 2),
                    className: "airport-icon",
                    html: t.wrap("<div/>").parent().html()
                });
            },
            onEachRecord: function(i, e) {
                i.on("mouseover", function() {
                    console.log(e), g.options.includeLayer = function(i) {
                        return i.Origin === e.code;
                    }, g.reloadData();
                });
            }
        });
        i.addLayer(f), t.addOverlay(f, "Airports");
        for (var p in r) if ("all" !== p) {
            var h = L.extend(u, {
                includeLayer: function(i) {
                    return i.UniqueCarrier === p;
                }
            }), y = new L.Graph(flight_delays, h);
            t.addOverlay(y, p), 0 === s && o.addLayer(y), s++;
        }
    }
};

jQuery(document).ready(function(i) {
    ScriptsVari.init();
});