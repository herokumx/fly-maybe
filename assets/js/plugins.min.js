/*!
 * Bootstrap v4.0.0-alpha.6 (https://getbootstrap.com)
 * Copyright 2011-2017 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");

+function(a) {
    var b = a.fn.jquery.split(" ")[0].split(".");
    if (b[0] < 2 && b[1] < 9 || 1 == b[0] && 9 == b[1] && b[2] < 1 || b[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
}(jQuery), function() {
    "function" == typeof Symbol && Symbol.iterator, function() {
        function a(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                Object.defineProperty(a, d.key, d);
            }
        }
    }(), function(a) {
        // shoutout AngusCroll (https://goo.gl/pxwQGp)
        function b(a) {
            return {}.toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
        }
        function c(a) {
            return (a[0] || a).nodeType;
        }
        function d() {
            return {
                bindType: g.end,
                delegateType: g.end,
                handle: function(b) {
                    if (a(b.target).is(this)) return b.handleObj.handler.apply(this, arguments);
                }
            };
        }
        function e() {
            if (window.QUnit) return !1;
            var a = document.createElement("bootstrap");
            for (var b in h) if (void 0 !== a.style[b]) return {
                end: h[b]
            };
            return !1;
        }
        function f(b) {
            var c = this, d = !1;
            return a(this).one(i.TRANSITION_END, function() {
                d = !0;
            }), setTimeout(function() {
                d || i.triggerTransitionEnd(c);
            }, b), this;
        }
        /**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */
        var g = !1, h = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        }, i = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function(a) {
                do {
                    // eslint-disable-next-line no-bitwise
                    a += ~~(1e6 * Math.random());
                } while (document.getElementById(a));
                return a;
            },
            getSelectorFromElement: function(a) {
                var b = a.getAttribute("data-target");
                return b || (b = a.getAttribute("href") || "", b = /^#[a-z]/i.test(b) ? b : null), 
                b;
            },
            reflow: function(a) {
                return a.offsetHeight;
            },
            triggerTransitionEnd: function(b) {
                a(b).trigger(g.end);
            },
            supportsTransitionEnd: function() {
                return Boolean(g);
            },
            typeCheckConfig: function(a, d, e) {
                for (var f in e) if (e.hasOwnProperty(f)) {
                    var g = e[f], h = d[f], i = h && c(h) ? "element" : b(h);
                    if (!new RegExp(g).test(i)) throw new Error(a.toUpperCase() + ': Option "' + f + '" provided type "' + i + '" but expected type "' + g + '".');
                }
            }
        };
        (function() {
            g = e(), a.fn.emulateTransitionEnd = f, i.supportsTransitionEnd() && (a.event.special[i.TRANSITION_END] = d());
        })();
    }(jQuery);
}(), /**
 * hashgrid (jQuery version, adapters are on the way)
 * http://github.com/dotjay/hashgrid
 * Version 8, 06 Oct 2012
 * Written by Jon Gibbins
 *
 * Contibutors:
 * James Aitken, http://loonypandora.co.uk/
 * Tom Arnold, http://www.tomarnold.de/
 * Sean Coates, http://seancoates.com/
 * Phil Dokas, http://jetless.org/
 * Andrew Jaswa, http://andrewjaswa.com/
 * Callum Macrae, http://lynx.io/
 */
/**
 * @license Copyright 2011 Analog Coop Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Usage
 *
 * // The basic #grid setup looks like this
 * var grid = new hashgrid();
 *
 * // But there are a whole bunch of additional options you can set
 * var grid = new hashgrid({
 *     id: 'mygrid',            // set a custom id for the grid container
 *     modifierKey: 'alt',      // optional 'ctrl', 'alt' or 'shift'
 *     showGridKey: 's',        // key to show the grid
 *     holdGridKey: 'enter',    // key to hold the grid in place
 *     foregroundKey: 'f',      // key to toggle foreground/background
 *     jumpGridsKey: 'd',       // key to cycle through the grid classes
 *     numberOfGrids: 2,        // number of grid classes used
 *     classPrefix: 'myclass',  // prefix for the grid classes
 *     cookiePrefix: 'mygrid'   // prefix for the cookie name
 * });
 */
/**
 * Make sure we have the library
 * TODO: Use an adapter
 */
"undefined" == typeof jQuery && alert("Hashgrid: jQuery not loaded. Make sure it's linked to your pages.");

/**
 * hashgrid overlay
 * @constructor
 */
var hashgrid = function(a) {
    /**
	 * Helpers
	 */
    function b(a) {
        if (null == y.modifierKey) return !0;
        // Bypass by default
        var b = !0;
        switch (y.modifierKey) {
          case "ctrl":
            b = !!a.ctrlKey && a.ctrlKey;
            break;

          case "alt":
            b = !!a.altKey && a.altKey;
            break;

          case "shift":
            b = !!a.shiftKey && a.shiftKey;
        }
        return b;
    }
    function c(a) {
        var b = a.keyCode ? a.keyCode : a.which;
        // Handle keywords
        return 13 == b ? "enter" : String.fromCharCode(b).toLowerCase();
    }
    function d() {
        h(y.cookiePrefix + y.id, (E ? "1" : "0") + "-" + B + "-" + z, 1);
    }
    function e() {
        q.show(), t.css({
            width: q.width()
        }), // hide any vertical blocks that aren't at the top of the viewport
        t.children(".vert").each(function() {
            var a = $(this);
            a.css("display", "inline-block"), a.offset().top > a.parent().offset().top && a.hide();
        });
    }
    function f(a) {
        var f, g = a.target.tagName.toLowerCase();
        if ("input" == g || "textarea" == g || "select" == g) return !0;
        if (!b(a)) return !0;
        if (!(f = c(a))) return !0;
        if (j[f]) return !0;
        switch (j[f] = !0, f) {
          case y.showGridKey:
            A ? E && (q.hide(), A = !1, E = !1, d()) : (e(), A = !0);
            break;

          case y.holdGridKey:
            A && !E && (// Turn sticky overlay on
            E = !0, d());
            break;

          case y.foregroundKey:
            A && (// Toggle sticky overlay z-index
            q.css("z-index") == D ? (q.css("z-index", C), B = "B") : (q.css("z-index", D), B = "F"), 
            d());
            break;

          case y.jumpGridsKey:
            A && y.numberOfGrids > 1 && (// Cycle through the available grids
            q.removeClass(y.classPrefix + z), z++, z > y.numberOfGrids && (z = 1), q.addClass(y.classPrefix + z), 
            e(), /webkit/.test(navigator.userAgent.toLowerCase()) && i(), d());
        }
        return !0;
    }
    function g(a) {
        var d;
        return !b(a) || (d = c(a), j[d] = !1, d && d == y.showGridKey && !E && (q.hide(), 
        A = !1), !0);
    }
    /**
	 * Cookie functions
	 *
	 * By Peter-Paul Koch:
	 * http://www.quirksmode.org/js/cookies.html
	 */
    function h(a, b, c) {
        var d, e = "";
        c && (d = new Date(), d.setTime(d.getTime() + 24 * c * 60 * 60 * 1e3), e = "; expires=" + d.toGMTString()), 
        document.cookie = a + "=" + b + e + "; path=/";
    }
    /**
	 * Forces a repaint (because WebKit has issues)
	 * http://www.sitepoint.com/forums/showthread.php?p=4538763
	 * http://www.phpied.com/the-new-game-show-will-it-reflow/
	 */
    function i() {
        var a = document.styleSheets[0];
        try {
            a.addRule(".xxxxxx", "position: relative"), a.removeRule(a.rules.length - 1);
        } catch (a) {}
    }
    var j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y = {
        id: "grid",
        // id for the grid container
        modifierKey: null,
        // optional 'ctrl', 'alt' or 'shift'
        showGridKey: "g",
        // key to show the grid
        holdGridKey: "h",
        // key to hold the grid in place
        foregroundKey: "f",
        // key to toggle foreground/background
        jumpGridsKey: "j",
        // key to cycle through the grid classes
        numberOfGrids: 1,
        // number of grid classes used
        classPrefix: "grid-",
        // prefix for the grid classes
        cookiePrefix: "hashgrid"
    }, z = 1, A = !1, B = "B", C = -1, D = 9999, E = !1;
    // Apply options
    if ("object" == typeof a) for (v in a) y[v] = a[v]; else "string" == typeof a && (y.id = a);
    // Break on zero line height
    if (// Remove any conflicting overlay
    $("#" + y.id).length > 0 && $("#" + y.id).remove(), // Create overlay, hidden before adding to DOM
    s = $("<div></div>"), s.attr("id", y.id).css({
        display: "none",
        pointerEvents: "none"
    }), $("body").prepend(s), q = $("#" + y.id), // Unless a custom z-index is set, ensure the overlay will be behind everything
    "auto" == q.css("z-index") && q.css("z-index", C), // Override the default overlay height with the actual page height
    u = parseFloat($(document).height()), q.height(u), // Add the first grid line so that we can measure it
    q.append('<div id="' + y.id + '-horiz" class="horiz first-line">'), // Position off-screen and display to calculate height
    x = q.css("top"), q.css({
        top: "-999px",
        display: "block"
    }), // Calculate the number of grid lines needed
    n = $("#" + y.id + "-horiz"), o = n.outerHeight(), // Hide and reset top
    q.css({
        display: "none",
        top: x
    }), o <= 0) return !1;
    for (// Add the remaining grid lines
    p = Math.floor(u / o), k = "", m = p - 1; m >= 1; m--) k += '<div class="horiz"></div>';
    for (q.append(k), // vertical grid
    q.append($('<div class="vert-container"></div>')), t = q.children(".vert-container"), 
    l = q.width(), t.css({
        width: l,
        position: "absolute",
        top: 0
    }), t.append('<div class="vert first-line">&nbsp;</div>'), // 30 is an arbitrarily large number...
    // can't calculate the margin width properly
    k = "", m = 0; m < 30; m++) k += '<div class="vert">&nbsp;</div>';
    // Check for saved state
    // Keyboard controls
    /**
	 * Event handlers
	 */
    return t.append(k), t.children().height(u).css({
        display: "inline-block"
    }), r = function(a) {
        for (var b, c = document.cookie.split(";"), d = 0, e = c.length, f = a + "="; d < e; d++) {
            for (b = c[d]; " " == b.charAt(0); ) b = b.substring(1, b.length);
            if (0 == b.indexOf(f)) return b.substring(f.length, b.length);
        }
        return null;
    }(y.cookiePrefix + y.id), "string" == typeof r ? (w = r.split("-"), w[2] = Number(w[2]), 
    "number" != typeof w[2] || isNaN(w[2]) || (z = w[2].toFixed(0), q.addClass(y.classPrefix + z)), 
    "F" == w[1] && (B = "F", q.css("z-index", D)), "1" == w[0] && (A = !0, E = !0, e())) : q.addClass(y.classPrefix + z), 
    $(document).bind("keydown", f), $(document).bind("keyup", g), j = {}, {};
};

/**
 * You can call hashgrid from your own code, but it's loaded here as
 * an example for your convenience.
 */
$(document).ready(function() {
    new hashgrid({
        numberOfGrids: 2
    });
});